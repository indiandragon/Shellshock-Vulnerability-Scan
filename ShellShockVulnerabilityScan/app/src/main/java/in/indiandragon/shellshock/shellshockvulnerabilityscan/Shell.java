/*
 * Thanks to https://github.com/jjNford/android-shell
 */

package in.indiandragon.shellshock.shellshockvulnerabilityscan;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;

public class Shell {

    // Define output streams.
    public static enum OUTPUT {
        NONE, STDOUT, STDERR
    };

    private static OUTPUT sOStream = OUTPUT.STDOUT;

    private static final String EOL = System.getProperty("line.separator");

    /**
     * Shell Interface Utility Exception is used to compress IOExcptions and
     * InterruptedExceptions.
     * 
     * @author JJ Ford
     */
    public static class ShellException extends Exception {
        private static final long serialVersionUID = 4820332926695755116L;

        public ShellException() {
            super();
        }

        public ShellException(String msg) {
            super(msg);
        }
    }

    /**
     * Used to buffer shell output off of the main thread.
     * 
     * @author JJ Ford
     */
    private static class Buffer extends Thread {
        private InputStream mInputStream;
        private StringBuffer mBuffer;

        /**
         * @param inputStream Data stream to get shell output from.
         */
        public Buffer(InputStream inputStream) {
            mInputStream = inputStream;
            mBuffer = new StringBuffer();
            this.start();
        }

        public String getOutput() {
            try {
                this.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return mBuffer.toString();
        }

        /*
         * (non-Javadoc)
         * @see java.lang.Thread#run()
         */
        @Override
        public void run() {
            try {
                String line;
                BufferedReader reader = new BufferedReader(new InputStreamReader(mInputStream));
                if ((line = reader.readLine()) != null) {
                    mBuffer.append(line);
                    while ((line = reader.readLine()) != null) {
                        mBuffer.append(Shell.EOL).append(line);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Block instantiation of this object.
     */
    private Shell() {
    }

    /**
     * Executes a command in the devices native shell.
     * 
     * @param cmd The command to execute.
     * @return Output of the command, null if there is no output.
     * @throws ShellException
     */
    private static String nativeExec(String cmd) throws ShellException {
        Process proc = null;
        Buffer buffer = null;
        try {
            proc = Runtime.getRuntime().exec("sh");
            OutputStream stdin = proc.getOutputStream();
            cmd += "\n";
            stdin.write(cmd.getBytes());
            stdin.write("exit\n".getBytes());
            stdin.flush();
            stdin.close();
            buffer = getBuffer(proc);
            proc.waitFor();
            return buffer.getOutput();
        } catch (Exception e) {
            throw new ShellException();
        }
    }

    /**
     * Gets the buffer for the shell output stream that is currently set.
     * 
     * @param proc Process running the shell command.
     * @return The buffer containing the shell output stream, NULL is none.
     */
    private static Buffer getBuffer(Process proc) {
        Buffer buffer = null;
        switch (sOStream) {
            case NONE:
                new Buffer(proc.getInputStream());
                new Buffer(proc.getErrorStream());
                break;
            case STDOUT:
                buffer = new Buffer(proc.getInputStream());
                new Buffer(proc.getErrorStream());
                break;
            case STDERR:
                buffer = new Buffer(proc.getErrorStream());
                new Buffer(proc.getInputStream());
                break;
            default:
                return buffer;
        }
        return buffer;
    }

    /*
     * API
     */

    /**
     * Sets the shell's {@link Shell.OUTPUT output stream}. Default value is
     * STDOUT.
     * 
     * @param ostream The output Stream to read shell from.
     */
    synchronized public static void setOutputStream(Shell.OUTPUT ostream) {
        sOStream = ostream;
    }

    /**
     * Executes a native shell command.
     * 
     * @param cmd The command to execute in the native shell.
     * @return Output of the command, null if there is no output.
     * @throws ShellException
     */
    synchronized public static String exec(String cmd) throws ShellException {
        return Shell.nativeExec(cmd);
    }
}
